# Пример workflow для сборки и деплоя сайта на Hugo в GitHub Pages
name: Deploy Hugo site to Pages

# Триггеры для запуска workflow:
on:
  # Запуск при пушах в ветку master (основная ветка)
  push:
    branches:
      - master

  # Позволяет запускать workflow вручную через вкладку Actions
  workflow_dispatch:

# Установка разрешений для токена GITHUB_TOKEN,
# чтобы обеспечить доступ для деплоя на GitHub Pages.
permissions:
  contents: read   # Доступ для чтения содержимого репозитория
  pages: write     # Разрешение на запись на GitHub Pages
  id-token: write  # Разрешение на создание id-token

# Конфигурация параллельных запусков: разрешаем запускать только один деплой одновременно,
# но не прерываем уже запущенные задачи.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Определение используемой оболочки по умолчанию (bash)
defaults:
  run:
    shell: bash

jobs:
  # Задача сборки
  build:
    runs-on: ubuntu-latest   # Используется последняя версия Ubuntu
    env:
      HUGO_VERSION: 0.141.0  # Версия Hugo для установки
    steps:
      # Шаг установки Hugo CLI
      - name: Install Hugo CLI
        run: |
          # Скачиваем deb-пакет Hugo Extended для Linux и устанавливаем его
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # Шаг установки Dart Sass через snap
      - name: Install Dart Sass
        run: sudo snap install dart-sass

      # Шаг получения исходного кода репозитория с включёнными сабмодулями
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive  # Рекурсивное получение сабмодулей
          fetch-depth: 0         # Полная история коммитов

      # Шаг настройки GitHub Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Шаг установки зависимостей Node.js, если есть файл package-lock.json или npm-shrinkwrap.json
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      # Шаг сборки сайта с помощью Hugo
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache  # Путь к кешу Hugo
          HUGO_ENVIRONMENT: production                  # Установка окружения в production
          TZ: America/Los_Angeles                        # Задание часового пояса
        run: |
          # Выполняем сборку сайта с очисткой ненужных файлов (--gc), минификацией (--minify)
          # и установкой базового URL, полученного из настроек Pages.
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      # Шаг загрузки артефакта (папка с собранным сайтом), который будет использоваться для деплоя
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Задача развертывания
  deploy:
    # Настройка окружения деплоя
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # URL развёрнутой страницы
    runs-on: ubuntu-latest
    needs: build  # Эта задача зависит от успешного выполнения задачи build
    steps:
      # Шаг деплоя собранного артефакта на GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
